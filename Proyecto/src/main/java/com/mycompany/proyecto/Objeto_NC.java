package com.mycompany.proyecto;

import com.opencsv.*;
import com.opencsv.exceptions.CsvValidationException;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import ucar.ma2.Array;
import ucar.ma2.InvalidRangeException;
import ucar.nc2.Attribute;
import ucar.nc2.Variable;


public class Objeto_NC {
    
    public List<Attribute> attributes;
    public List<Variable> variables;
    public String[] fechas = {"01-1979","02-1979","03-1979","04-1979","05-1979","06-1979","07-1979","08-1979","09-1979","10-1979","11-1979","12-1979",
                              "01-1980","02-1980","03-1980","04-1980","05-1980","06-1980","07-1980","08-1980","09-1980","10-1980","11-1980","12-1980",
                              "01-1981","02-1981","03-1981","04-1981","05-1981","06-1981","07-1981","08-1981","09-1981","10-1981","11-1981","12-1981",
                              "01-1982","02-1982","03-1982","04-1982","05-1982","06-1982","07-1982","08-1982","09-1982","10-1982","11-1982","12-1982",
                              "01-1983","02-1983","03-1983","04-1983","05-1983","06-1983","07-1983","08-1983","09-1983","10-1983","11-1983","12-1983",
                              "01-1984","02-1984","03-1984","04-1984","05-1984","06-1984","07-1984","08-1984","09-1984","10-1984","11-1984","12-1984",
                              "01-1985","02-1985","03-1985","04-1985","05-1985","06-1985","07-1985","08-1985","09-1985","10-1985","11-1985","12-1985",
                              "01-1986","02-1986","03-1986","04-1986","05-1986","06-1986","07-1986","08-1986","09-1986","10-1986","11-1986","12-1986",
                              "01-1987","02-1987","03-1987","04-1987","05-1987","06-1987","07-1987","08-1987","09-1987","10-1987","11-1987","12-1987",
                              "01-1988","02-1988","03-1988","04-1988","05-1988","06-1988","07-1988","08-1988","09-1988","10-1988","11-1988","12-1988",
                              "01-1989","02-1989","03-1989","04-1989","05-1989","06-1989","07-1989","08-1989","09-1989","10-1989","11-1989","12-1989",
                              "01-1990","02-1990","03-1990","04-1990","05-1990","06-1990","07-1990","08-1990","09-1990","10-1990","11-1990","12-1990",
                              "01-1991","02-1991","03-1991","04-1991","05-1991","06-1991","07-1991","08-1991","09-1991","10-1991","11-1991","12-1991",
                              "01-1992","02-1992","03-1992","04-1992","05-1992","06-1992","07-1992","08-1992","09-1992","10-1992","11-1992","12-1992",
                              "01-1993","02-1993","03-1993","04-1993","05-1993","06-1993","07-1993","08-1993","09-1993","10-1993","11-1993","12-1993",
                              "01-1994","02-1994","03-1994","04-1994","05-1994","06-1994","07-1994","08-1994","09-1994","10-1994","11-1994","12-1994",
                              "01-1995","02-1995","03-1995","04-1995","05-1995","06-1995","07-1995","08-1995","09-1995","10-1995","11-1995","12-1995",
                              "01-1996","02-1996","03-1996","04-1996","05-1996","06-1996","07-1996","08-1996","09-1996","10-1996","11-1996","12-1996",
                              "01-1997","02-1997","03-1997","04-1997","05-1997","06-1997","07-1997","08-1997","09-1997","10-1997","11-1997","12-1997",
                              "01-1998","02-1998","03-1998","04-1998","05-1998","06-1998","07-1998","08-1998","09-1998","10-1998","11-1998","12-1998",
                              "01-1999","02-1999","03-1999","04-1999","05-1999","06-1999","07-1999","08-1999","09-1999","10-1999","11-1999","12-1999",
                              "01-2000","02-2000","03-2000","04-2000","05-2000","06-2000","07-2000","08-2000","09-2000","10-2000","11-2000","12-2000",
                              "01-2001","02-2001","03-2001","04-2001","05-2001","06-2001","07-2001","08-2001","09-2001","10-2001","11-2001","12-2001",
                              "01-2002","02-2002","03-2002","04-2002","05-2002","06-2002","07-2002","08-2002","09-2002","10-2002","11-2002","12-2002",
                              "01-2003","02-2003","03-2003","04-2003","05-2003","06-2003","07-2003","08-2003","09-2003","10-2003","11-2003","12-2003",
                              "01-2004","02-2004","03-2004","04-2004","05-2004","06-2004","07-2004","08-2004","09-2004","10-2004","11-2004","12-2004",
                              "01-2005","02-2005","03-2005","04-2005","05-2005","06-2005","07-2005","08-2005","09-2005","10-2005","11-2005","12-2005",
                              "01-2006","02-2006","03-2006","04-2006","05-2006","06-2006","07-2006","08-2006","09-2006","10-2006","11-2006","12-2006",
                              "01-2007","02-2007","03-2007","04-2007","05-2007","06-2007","07-2007","08-2007","09-2007","10-2007","11-2007","12-2007",
                              "01-2008","02-2008","03-2008","04-2008","05-2008","06-2008","07-2008","08-2008","09-2008","10-2008","11-2008","12-2008",
                              "01-2009","02-2009","03-2009","04-2009","05-2009","06-2009","07-2009","08-2009","09-2009","10-2009","11-2009","12-2009",
                              "01-2010","02-2010","03-2010","04-2010","05-2010","06-2010","07-2010","08-2010","09-2010","10-2010","11-2010","12-2010",
                              "01-2011","02-2011","03-2011","04-2011","05-2011","06-2011","07-2011","08-2011","09-2011","10-2011","11-2011","12-2011",
                              "01-2012","02-2012","03-2012","04-2012","05-2012","06-2012","07-2012","08-2012","09-2012","10-2012","11-2012","12-2012",
                              "01-2013","02-2013","03-2013","04-2013","05-2013","06-2013","07-2013","08-2013","09-2013","10-2013","11-2013","12-2013",
                              "01-2014","02-2014","03-2014","04-2014","05-2014","06-2014","07-2014","08-2014","09-2014","10-2014","11-2014","12-2014",
                              "01-2015","02-2015","03-2015","04-2015","05-2015","06-2015","07-2015","08-2015","09-2015","10-2015","11-2015","12-2015",
                              "01-2016","02-2016","03-2016","04-2016","05-2016","06-2016","07-2016","08-2016","09-2016","10-2016","11-2016","12-2016",
                              "01-2017","02-2017","03-2017","04-2017","05-2017","06-2017","07-2017","08-2017","09-2017","10-2017","11-2017","12-2017",
                              "01-2018","02-2018","03-2018","04-2018","05-2018","06-2018","07-2018","08-2018","09-2018","10-2018","11-2018","12-2018",
                              "01-2019","02-2019","03-2019","04-2019","05-2019","06-2019","07-2019","08-2019","09-2019","10-2019","11-2019","12-2019"};
    
    public String[] nuble = {"-37,375;-72,925","-37,375;-72,875","-37,375;-72,825","-37,375;-72,775","-37,375;-72,725","-37,375;-72,675","-37,375;-72,625","-37,375;-72,575","-37,375;-72,525","-37,375;-72,475","-37,375;-72,425","-37,375;-72,375","-37,375;-72,325","-37,375;-72,275","-37,375;-72,225","-37,375;-72,175","-37,375;-72,125","-37,375;-72,075","-37,375;-72,025","-37,375;-71,975","-37,375;-71,925","-37,375;-71,875","-37,375;-71,825","-37,375;-71,775","-37,375;-71,725","-37,375;-71,675","-37,375;-71,625","-37,375;-71,575","-37,375;-71,525","-37,375;-71,475","-37,375;-71,425","-37,375;-71,375","-37,375;-71,325","-37,375;-71,275","-37,375;-71,225","-37,375;-71,175","-37,375;-71,125","-37,375;-71,075","-37,375;-71,025","-37,375;-70,975",
                             "-37,325;-72,925","-37,325;-72,875","-37,325;-72,825","-37,325;-72,775","-37,325;-72,725","-37,325;-72,675","-37,325;-72,625","-37,325;-72,575","-37,325;-72,525","-37,325;-72,475","-37,325;-72,425","-37,325;-72,375","-37,325;-72,325","-37,325;-72,275","-37,325;-72,225","-37,325;-72,175","-37,325;-72,125","-37,325;-72,075","-37,325;-72,025","-37,325;-71,975","-37,325;-71,925","-37,325;-71,875","-37,325;-71,825","-37,325;-71,775","-37,325;-71,725","-37,325;-71,675","-37,325;-71,625","-37,325;-71,575","-37,325;-71,525","-37,325;-71,475","-37,325;-71,425","-37,325;-71,375","-37,325;-71,325","-37,325;-71,275","-37,325;-71,225","-37,325;-71,175","-37,325;-71,125","-37,325;-71,075","-37,325;-71,025","-37,325;-70,975",
                             "-37,275;-72,925","-37,275;-72,875","-37,275;-72,825","-37,275;-72,775","-37,275;-72,725","-37,275;-72,675","-37,275;-72,625","-37,275;-72,575","-37,275;-72,525","-37,275;-72,475","-37,275;-72,425","-37,275;-72,375","-37,275;-72,325","-37,275;-72,275","-37,275;-72,225","-37,275;-72,175","-37,275;-72,125","-37,275;-72,075","-37,275;-72,025","-37,275;-71,975","-37,275;-71,925","-37,275;-71,875","-37,275;-71,825","-37,275;-71,775","-37,275;-71,725","-37,275;-71,675","-37,275;-71,625","-37,275;-71,575","-37,275;-71,525","-37,275;-71,475","-37,275;-71,425","-37,275;-71,375","-37,275;-71,325","-37,275;-71,275","-37,275;-71,225","-37,275;-71,175","-37,275;-71,125","-37,275;-71,075","-37,275;-71,025","-37,275;-70,975",
                             "-37,225;-72,925","-37,225;-72,875","-37,225;-72,825","-37,225;-72,775","-37,225;-72,725","-37,225;-72,675","-37,225;-72,625","-37,225;-72,575","-37,225;-72,525","-37,225;-72,475","-37,225;-72,425","-37,225;-72,375","-37,225;-72,325","-37,225;-72,275","-37,225;-72,225","-37,225;-72,175","-37,225;-72,125","-37,225;-72,075","-37,225;-72,025","-37,225;-71,975","-37,225;-71,925","-37,225;-71,875","-37,225;-71,825","-37,225;-71,775","-37,225;-71,725","-37,225;-71,675","-37,225;-71,625","-37,225;-71,575","-37,225;-71,525","-37,225;-71,475","-37,225;-71,425","-37,225;-71,375","-37,225;-71,325","-37,225;-71,275","-37,225;-71,225","-37,225;-71,175","-37,225;-71,125","-37,225;-71,075","-37,225;-71,025","-37,225;-70,975",
                             "-37,175;-72,925","-37,175;-72,875","-37,175;-72,825","-37,175;-72,775","-37,175;-72,725","-37,175;-72,675","-37,175;-72,625","-37,175;-72,575","-37,175;-72,525","-37,175;-72,475","-37,175;-72,425","-37,175;-72,375","-37,175;-72,325","-37,175;-72,275","-37,175;-72,225","-37,175;-72,175","-37,175;-72,125","-37,175;-72,075","-37,175;-72,025","-37,175;-71,975","-37,175;-71,925","-37,175;-71,875","-37,175;-71,825","-37,175;-71,775","-37,175;-71,725","-37,175;-71,675","-37,175;-71,625","-37,175;-71,575","-37,175;-71,525","-37,175;-71,475","-37,175;-71,425","-37,175;-71,375","-37,175;-71,325","-37,175;-71,275","-37,175;-71,225","-37,175;-71,175","-37,175;-71,125","-37,175;-71,075","-37,175;-71,025","-37,175;-70,975",
                             "-37,125;-72,925","-37,125;-72,875","-37,125;-72,825","-37,125;-72,775","-37,125;-72,725","-37,125;-72,675","-37,125;-72,625","-37,125;-72,575","-37,125;-72,525","-37,125;-72,475","-37,125;-72,425","-37,125;-72,375","-37,125;-72,325","-37,125;-72,275","-37,125;-72,225","-37,125;-72,175","-37,125;-72,125","-37,125;-72,075","-37,125;-72,025","-37,125;-71,975","-37,125;-71,925","-37,125;-71,875","-37,125;-71,825","-37,125;-71,775","-37,125;-71,725","-37,125;-71,675","-37,125;-71,625","-37,125;-71,575","-37,125;-71,525","-37,125;-71,475","-37,125;-71,425","-37,125;-71,375","-37,125;-71,325","-37,125;-71,275","-37,125;-71,225","-37,125;-71,175","-37,125;-71,125","-37,125;-71,075","-37,125;-71,025","-37,125;-70,975",
                             "-37,075;-72,925","-37,075;-72,875","-37,075;-72,825","-37,075;-72,775","-37,075;-72,725","-37,075;-72,675","-37,075;-72,625","-37,075;-72,575","-37,075;-72,525","-37,075;-72,475","-37,075;-72,425","-37,075;-72,375","-37,075;-72,325","-37,075;-72,275","-37,075;-72,225","-37,075;-72,175","-37,075;-72,125","-37,075;-72,075","-37,075;-72,025","-37,075;-71,975","-37,075;-71,925","-37,075;-71,875","-37,075;-71,825","-37,075;-71,775","-37,075;-71,725","-37,075;-71,675","-37,075;-71,625","-37,075;-71,575","-37,075;-71,525","-37,075;-71,475","-37,075;-71,425","-37,075;-71,375","-37,075;-71,325","-37,075;-71,275","-37,075;-71,225","-37,075;-71,175","-37,075;-71,125","-37,075;-71,075","-37,075;-71,025","-37,075;-70,975",
                             "-37,025;-72,925","-37,025;-72,875","-37,025;-72,825","-37,025;-72,775","-37,025;-72,725","-37,025;-72,675","-37,025;-72,625","-37,025;-72,575","-37,025;-72,525","-37,025;-72,475","-37,025;-72,425","-37,025;-72,375","-37,025;-72,325","-37,025;-72,275","-37,025;-72,225","-37,025;-72,175","-37,025;-72,125","-37,025;-72,075","-37,025;-72,025","-37,025;-71,975","-37,025;-71,925","-37,025;-71,875","-37,025;-71,825","-37,025;-71,775","-37,025;-71,725","-37,025;-71,675","-37,025;-71,625","-37,025;-71,575","-37,025;-71,525","-37,025;-71,475","-37,025;-71,425","-37,025;-71,375","-37,025;-71,325","-37,025;-71,275","-37,025;-71,225","-37,025;-71,175","-37,025;-71,125","-37,025;-71,075","-37,025;-71,025","-37,025;-70,975",
                             "-36,975;-72,925","-36,975;-72,875","-36,975;-72,825","-36,975;-72,775","-36,975;-72,725","-36,975;-72,675","-36,975;-72,625","-36,975;-72,575","-36,975;-72,525","-36,975;-72,475","-36,975;-72,425","-36,975;-72,375","-36,975;-72,325","-36,975;-72,275","-36,975;-72,225","-36,975;-72,175","-36,975;-72,125","-36,975;-72,075","-36,975;-72,025","-36,975;-71,975","-36,975;-71,925","-36,975;-71,875","-36,975;-71,825","-36,975;-71,775","-36,975;-71,725","-36,975;-71,675","-36,975;-71,625","-36,975;-71,575","-36,975;-71,525","-36,975;-71,475","-36,975;-71,425","-36,975;-71,375","-36,975;-71,325","-36,975;-71,275","-36,975;-71,225","-36,975;-71,175","-36,975;-71,125","-36,975;-71,075","-36,975;-71,025","-36,975;-70,975",
                             "-36,925;-72,925","-36,925;-72,875","-36,925;-72,825","-36,925;-72,775","-36,925;-72,725","-36,925;-72,675","-36,925;-72,625","-36,925;-72,575","-36,925;-72,525","-36,925;-72,475","-36,925;-72,425","-36,925;-72,375","-36,925;-72,325","-36,925;-72,275","-36,925;-72,225","-36,925;-72,175","-36,925;-72,125","-36,925;-72,075","-36,925;-72,025","-36,925;-71,975","-36,925;-71,925","-36,925;-71,875","-36,925;-71,825","-36,925;-71,775","-36,925;-71,725","-36,925;-71,675","-36,925;-71,625","-36,925;-71,575","-36,925;-71,525","-36,925;-71,475","-36,925;-71,425","-36,925;-71,375","-36,925;-71,325","-36,925;-71,275","-36,925;-71,225","-36,925;-71,175","-36,925;-71,125","-36,925;-71,075","-36,925;-71,025","-36,925;-70,975",
                             "-36,875;-72,925","-36,875;-72,875","-36,875;-72,825","-36,875;-72,775","-36,875;-72,725","-36,875;-72,675","-36,875;-72,625","-36,875;-72,575","-36,875;-72,525","-36,875;-72,475","-36,875;-72,425","-36,875;-72,375","-36,875;-72,325","-36,875;-72,275","-36,875;-72,225","-36,875;-72,175","-36,875;-72,125","-36,875;-72,075","-36,875;-72,025","-36,875;-71,975","-36,875;-71,925","-36,875;-71,875","-36,875;-71,825","-36,875;-71,775","-36,875;-71,725","-36,875;-71,675","-36,875;-71,625","-36,875;-71,575","-36,875;-71,525","-36,875;-71,475","-36,875;-71,425","-36,875;-71,375","-36,875;-71,325","-36,875;-71,275","-36,875;-71,225","-36,875;-71,175","-36,875;-71,125","-36,875;-71,075","-36,875;-71,025","-36,875;-70,975",
                             "-36,825;-72,925","-36,825;-72,875","-36,825;-72,825","-36,825;-72,775","-36,825;-72,725","-36,825;-72,675","-36,825;-72,625","-36,825;-72,575","-36,825;-72,525","-36,825;-72,475","-36,825;-72,425","-36,825;-72,375","-36,825;-72,325","-36,825;-72,275","-36,825;-72,225","-36,825;-72,175","-36,825;-72,125","-36,825;-72,075","-36,825;-72,025","-36,825;-71,975","-36,825;-71,925","-36,825;-71,875","-36,825;-71,825","-36,825;-71,775","-36,825;-71,725","-36,825;-71,675","-36,825;-71,625","-36,825;-71,575","-36,825;-71,525","-36,825;-71,475","-36,825;-71,425","-36,825;-71,375","-36,825;-71,325","-36,825;-71,275","-36,825;-71,225","-36,825;-71,175","-36,825;-71,125","-36,825;-71,075","-36,825;-71,025","-36,825;-70,975",
                             "-36,775;-72,925","-36,775;-72,875","-36,775;-72,825","-36,775;-72,775","-36,775;-72,725","-36,775;-72,675","-36,775;-72,625","-36,775;-72,575","-36,775;-72,525","-36,775;-72,475","-36,775;-72,425","-36,775;-72,375","-36,775;-72,325","-36,775;-72,275","-36,775;-72,225","-36,775;-72,175","-36,775;-72,125","-36,775;-72,075","-36,775;-72,025","-36,775;-71,975","-36,775;-71,925","-36,775;-71,875","-36,775;-71,825","-36,775;-71,775","-36,775;-71,725","-36,775;-71,675","-36,775;-71,625","-36,775;-71,575","-36,775;-71,525","-36,775;-71,475","-36,775;-71,425","-36,775;-71,375","-36,775;-71,325","-36,775;-71,275","-36,775;-71,225","-36,775;-71,175","-36,775;-71,125","-36,775;-71,075","-36,775;-71,025","-36,775;-70,975",
                             "-36,725;-72,925","-36,725;-72,875","-36,725;-72,825","-36,725;-72,775","-36,725;-72,725","-36,725;-72,675","-36,725;-72,625","-36,725;-72,575","-36,725;-72,525","-36,725;-72,475","-36,725;-72,425","-36,725;-72,375","-36,725;-72,325","-36,725;-72,275","-36,725;-72,225","-36,725;-72,175","-36,725;-72,125","-36,725;-72,075","-36,725;-72,025","-36,725;-71,975","-36,725;-71,925","-36,725;-71,875","-36,725;-71,825","-36,725;-71,775","-36,725;-71,725","-36,725;-71,675","-36,725;-71,625","-36,725;-71,575","-36,725;-71,525","-36,725;-71,475","-36,725;-71,425","-36,725;-71,375","-36,725;-71,325","-36,725;-71,275","-36,725;-71,225","-36,725;-71,175","-36,725;-71,125","-36,725;-71,075","-36,725;-71,025","-36,725;-70,975",
                             "-36,675;-72,925","-36,675;-72,875","-36,675;-72,825","-36,675;-72,775","-36,675;-72,725","-36,675;-72,675","-36,675;-72,625","-36,675;-72,575","-36,675;-72,525","-36,675;-72,475","-36,675;-72,425","-36,675;-72,375","-36,675;-72,325","-36,675;-72,275","-36,675;-72,225","-36,675;-72,175","-36,675;-72,125","-36,675;-72,075","-36,675;-72,025","-36,675;-71,975","-36,675;-71,925","-36,675;-71,875","-36,675;-71,825","-36,675;-71,775","-36,675;-71,725","-36,675;-71,675","-36,675;-71,625","-36,675;-71,575","-36,675;-71,525","-36,675;-71,475","-36,675;-71,425","-36,675;-71,375","-36,675;-71,325","-36,675;-71,275","-36,675;-71,225","-36,675;-71,175","-36,675;-71,125","-36,675;-71,075","-36,675;-71,025","-36,675;-70,975",
                             "-36,625;-72,925","-36,625;-72,875","-36,625;-72,825","-36,625;-72,775","-36,625;-72,725","-36,625;-72,675","-36,625;-72,625","-36,625;-72,575","-36,625;-72,525","-36,625;-72,475","-36,625;-72,425","-36,625;-72,375","-36,625;-72,325","-36,625;-72,275","-36,625;-72,225","-36,625;-72,175","-36,625;-72,125","-36,625;-72,075","-36,625;-72,025","-36,625;-71,975","-36,625;-71,925","-36,625;-71,875","-36,625;-71,825","-36,625;-71,775","-36,625;-71,725","-36,625;-71,675","-36,625;-71,625","-36,625;-71,575","-36,625;-71,525","-36,625;-71,475","-36,625;-71,425","-36,625;-71,375","-36,625;-71,325","-36,625;-71,275","-36,625;-71,225","-36,625;-71,175","-36,625;-71,125","-36,625;-71,075","-36,625;-71,025","-36,625;-70,975",
                             "-36,575;-72,925","-36,575;-72,875","-36,575;-72,825","-36,575;-72,775","-36,575;-72,725","-36,575;-72,675","-36,575;-72,625","-36,575;-72,575","-36,575;-72,525","-36,575;-72,475","-36,575;-72,425","-36,575;-72,375","-36,575;-72,325","-36,575;-72,275","-36,575;-72,225","-36,575;-72,175","-36,575;-72,125","-36,575;-72,075","-36,575;-72,025","-36,575;-71,975","-36,575;-71,925","-36,575;-71,875","-36,575;-71,825","-36,575;-71,775","-36,575;-71,725","-36,575;-71,675","-36,575;-71,625","-36,575;-71,575","-36,575;-71,525","-36,575;-71,475","-36,575;-71,425","-36,575;-71,375","-36,575;-71,325","-36,575;-71,275","-36,575;-71,225","-36,575;-71,175","-36,575;-71,125","-36,575;-71,075","-36,575;-71,025","-36,575;-70,975",
                             "-36,525;-72,925","-36,525;-72,875","-36,525;-72,825","-36,525;-72,775","-36,525;-72,725","-36,525;-72,675","-36,525;-72,625","-36,525;-72,575","-36,525;-72,525","-36,525;-72,475","-36,525;-72,425","-36,525;-72,375","-36,525;-72,325","-36,525;-72,275","-36,525;-72,225","-36,525;-72,175","-36,525;-72,125","-36,525;-72,075","-36,525;-72,025","-36,525;-71,975","-36,525;-71,925","-36,525;-71,875","-36,525;-71,825","-36,525;-71,775","-36,525;-71,725","-36,525;-71,675","-36,525;-71,625","-36,525;-71,575","-36,525;-71,525","-36,525;-71,475","-36,525;-71,425","-36,525;-71,375","-36,525;-71,325","-36,525;-71,275","-36,525;-71,225","-36,525;-71,175","-36,525;-71,125","-36,525;-71,075","-36,525;-71,025","-36,525;-70,975",
                             "-36,475;-72,925","-36,475;-72,875","-36,475;-72,825","-36,475;-72,775","-36,475;-72,725","-36,475;-72,675","-36,475;-72,625","-36,475;-72,575","-36,475;-72,525","-36,475;-72,475","-36,475;-72,425","-36,475;-72,375","-36,475;-72,325","-36,475;-72,275","-36,475;-72,225","-36,475;-72,175","-36,475;-72,125","-36,475;-72,075","-36,475;-72,025","-36,475;-71,975","-36,475;-71,925","-36,475;-71,875","-36,475;-71,825","-36,475;-71,775","-36,475;-71,725","-36,475;-71,675","-36,475;-71,625","-36,475;-71,575","-36,475;-71,525","-36,475;-71,475","-36,475;-71,425","-36,475;-71,375","-36,475;-71,325","-36,475;-71,275","-36,475;-71,225","-36,475;-71,175","-36,475;-71,125","-36,475;-71,075","-36,475;-71,025","-36,475;-70,975",
                             "-36,425;-72,925","-36,425;-72,875","-36,425;-72,825","-36,425;-72,775","-36,425;-72,725","-36,425;-72,675","-36,425;-72,625","-36,425;-72,575","-36,425;-72,525","-36,425;-72,475","-36,425;-72,425","-36,425;-72,375","-36,425;-72,325","-36,425;-72,275","-36,425;-72,225","-36,425;-72,175","-36,425;-72,125","-36,425;-72,075","-36,425;-72,025","-36,425;-71,975","-36,425;-71,925","-36,425;-71,875","-36,425;-71,825","-36,425;-71,775","-36,425;-71,725","-36,425;-71,675","-36,425;-71,625","-36,425;-71,575","-36,425;-71,525","-36,425;-71,475","-36,425;-71,425","-36,425;-71,375","-36,425;-71,325","-36,425;-71,275","-36,425;-71,225","-36,425;-71,175","-36,425;-71,125","-36,425;-71,075","-36,425;-71,025","-36,425;-70,975",
                             "-36,375;-72,925","-36,375;-72,875","-36,375;-72,825","-36,375;-72,775","-36,375;-72,725","-36,375;-72,675","-36,375;-72,625","-36,375;-72,575","-36,375;-72,525","-36,375;-72,475","-36,375;-72,425","-36,375;-72,375","-36,375;-72,325","-36,375;-72,275","-36,375;-72,225","-36,375;-72,175","-36,375;-72,125","-36,375;-72,075","-36,375;-72,025","-36,375;-71,975","-36,375;-71,925","-36,375;-71,875","-36,375;-71,825","-36,375;-71,775","-36,375;-71,725","-36,375;-71,675","-36,375;-71,625","-36,375;-71,575","-36,375;-71,525","-36,375;-71,475","-36,375;-71,425","-36,375;-71,375","-36,375;-71,325","-36,375;-71,275","-36,375;-71,225","-36,375;-71,175","-36,375;-71,125","-36,375;-71,075","-36,375;-71,025","-36,375;-70,975",
                             "-36,325;-72,925","-36,325;-72,875","-36,325;-72,825","-36,325;-72,775","-36,325;-72,725","-36,325;-72,675","-36,325;-72,625","-36,325;-72,575","-36,325;-72,525","-36,325;-72,475","-36,325;-72,425","-36,325;-72,375","-36,325;-72,325","-36,325;-72,275","-36,325;-72,225","-36,325;-72,175","-36,325;-72,125","-36,325;-72,075","-36,325;-72,025","-36,325;-71,975","-36,325;-71,925","-36,325;-71,875","-36,325;-71,825","-36,325;-71,775","-36,325;-71,725","-36,325;-71,675","-36,325;-71,625","-36,325;-71,575","-36,325;-71,525","-36,325;-71,475","-36,325;-71,425","-36,325;-71,375","-36,325;-71,325","-36,325;-71,275","-36,325;-71,225","-36,325;-71,175","-36,325;-71,125","-36,325;-71,075","-36,325;-71,025","-36,325;-70,975",
                             "-36,275;-72,925","-36,275;-72,875","-36,275;-72,825","-36,275;-72,775","-36,275;-72,725","-36,275;-72,675","-36,275;-72,625","-36,275;-72,575","-36,275;-72,525","-36,275;-72,475","-36,275;-72,425","-36,275;-72,375","-36,275;-72,325","-36,275;-72,275","-36,275;-72,225","-36,275;-72,175","-36,275;-72,125","-36,275;-72,075","-36,275;-72,025","-36,275;-71,975","-36,275;-71,925","-36,275;-71,875","-36,275;-71,825","-36,275;-71,775","-36,275;-71,725","-36,275;-71,675","-36,275;-71,625","-36,275;-71,575","-36,275;-71,525","-36,275;-71,475","-36,275;-71,425","-36,275;-71,375","-36,275;-71,325","-36,275;-71,275","-36,275;-71,225","-36,275;-71,175","-36,275;-71,125","-36,275;-71,075","-36,275;-71,025","-36,275;-70,975",
                             "-36,225;-72,925","-36,225;-72,875","-36,225;-72,825","-36,225;-72,775","-36,225;-72,725","-36,225;-72,675","-36,225;-72,625","-36,225;-72,575","-36,225;-72,525","-36,225;-72,475","-36,225;-72,425","-36,225;-72,375","-36,225;-72,325","-36,225;-72,275","-36,225;-72,225","-36,225;-72,175","-36,225;-72,125","-36,225;-72,075","-36,225;-72,025","-36,225;-71,975","-36,225;-71,925","-36,225;-71,875","-36,225;-71,825","-36,225;-71,775","-36,225;-71,725","-36,225;-71,675","-36,225;-71,625","-36,225;-71,575","-36,225;-71,525","-36,225;-71,475","-36,225;-71,425","-36,225;-71,375","-36,225;-71,325","-36,225;-71,275","-36,225;-71,225","-36,225;-71,175","-36,225;-71,125","-36,225;-71,075","-36,225;-71,025","-36,225;-70,975",
                             "-36,175;-72,925","-36,175;-72,875","-36,175;-72,825","-36,175;-72,775","-36,175;-72,725","-36,175;-72,675","-36,175;-72,625","-36,175;-72,575","-36,175;-72,525","-36,175;-72,475","-36,175;-72,425","-36,175;-72,375","-36,175;-72,325","-36,175;-72,275","-36,175;-72,225","-36,175;-72,175","-36,175;-72,125","-36,175;-72,075","-36,175;-72,025","-36,175;-71,975","-36,175;-71,925","-36,175;-71,875","-36,175;-71,825","-36,175;-71,775","-36,175;-71,725","-36,175;-71,675","-36,175;-71,625","-36,175;-71,575","-36,175;-71,525","-36,175;-71,475","-36,175;-71,425","-36,175;-71,375","-36,175;-71,325","-36,175;-71,275","-36,175;-71,225","-36,175;-71,175","-36,175;-71,125","-36,175;-71,075","-36,175;-71,025","-36,175;-70,975",
                             "-36,125;-72,925","-36,125;-72,875","-36,125;-72,825","-36,125;-72,775","-36,125;-72,725","-36,125;-72,675","-36,125;-72,625","-36,125;-72,575","-36,125;-72,525","-36,125;-72,475","-36,125;-72,425","-36,125;-72,375","-36,125;-72,325","-36,125;-72,275","-36,125;-72,225","-36,125;-72,175","-36,125;-72,125","-36,125;-72,075","-36,125;-72,025","-36,125;-71,975","-36,125;-71,925","-36,125;-71,875","-36,125;-71,825","-36,125;-71,775","-36,125;-71,725","-36,125;-71,675","-36,125;-71,625","-36,125;-71,575","-36,125;-71,525","-36,125;-71,475","-36,125;-71,425","-36,125;-71,375","-36,125;-71,325","-36,125;-71,275","-36,125;-71,225","-36,125;-71,175","-36,125;-71,125","-36,125;-71,075","-36,125;-71,025","-36,125;-70,975",
                             "-36,075;-72,925","-36,075;-72,875","-36,075;-72,825","-36,075;-72,775","-36,075;-72,725","-36,075;-72,675","-36,075;-72,625","-36,075;-72,575","-36,075;-72,525","-36,075;-72,475","-36,075;-72,425","-36,075;-72,375","-36,075;-72,325","-36,075;-72,275","-36,075;-72,225","-36,075;-72,175","-36,075;-72,125","-36,075;-72,075","-36,075;-72,025","-36,075;-71,975","-36,075;-71,925","-36,075;-71,875","-36,075;-71,825","-36,075;-71,775","-36,075;-71,725","-36,075;-71,675","-36,075;-71,625","-36,075;-71,575","-36,075;-71,525","-36,075;-71,475","-36,075;-71,425","-36,075;-71,375","-36,075;-71,325","-36,075;-71,275","-36,075;-71,225","-36,075;-71,175","-36,075;-71,125","-36,075;-71,075","-36,075;-71,025","-36,075;-70,975",
                             "-36,025;-72,925","-36,025;-72,875","-36,025;-72,825","-36,025;-72,775","-36,025;-72,725","-36,025;-72,675","-36,025;-72,625","-36,025;-72,575","-36,025;-72,525","-36,025;-72,475","-36,025;-72,425","-36,025;-72,375","-36,025;-72,325","-36,025;-72,275","-36,025;-72,225","-36,025;-72,175","-36,025;-72,125","-36,025;-72,075","-36,025;-72,025","-36,025;-71,975","-36,025;-71,925","-36,025;-71,875","-36,025;-71,825","-36,025;-71,775","-36,025;-71,725","-36,025;-71,675","-36,025;-71,625","-36,025;-71,575","-36,025;-71,525","-36,025;-71,475","-36,025;-71,425","-36,025;-71,375","-36,025;-71,325","-36,025;-71,275","-36,025;-71,225","-36,025;-71,175","-36,025;-71,125","-36,025;-71,075","-36,025;-71,025","-36,025;-70,975"};
    
    
    public Objeto_NC () {
    
    }
    
    
    public Objeto_NC (List<Attribute> a, List<Variable> v) {
        attributes=a;
        variables=v;
    }
    
    
    //Retornamos arreglo con datos de Variable para una fecha específica 
    public String[] retornar_variable(Variable v, String textFecha) throws InvalidRangeException{
        String nameVariable = v.getShortName();
            String nameTime = "";
            String nameLon = "";
            String nameLat = "";  
            int fecha = obtenerIndexFecha(textFecha); //Obtenemos el índice de time dentro del Archivo NetCDF
            
             
            
            int[] shape = v.getShape();
            int nTiempo = shape[0]; //cantidad de elementos tiempo dentro de la variable
            int nLatitud = shape[1];//cantidad de elementos latitud dentro de la variable
            int nLongitud = shape[2];//cantidad de elementos longitud dentro de la variable
            int n = nLongitud*nLatitud;//cantidad de pares coordenadas
            String[] registros = new String[n+1];
            try {    
                Array longitudes = null; //guardamos las longitudes de la variable
                Array latitudes = null; //guardamos las latitudes de la variable
                DecimalFormat formato = new DecimalFormat("#.000");
                double lat;
                double lon;
                float dato;
                int posicion = 1;
                String latitud;
                String longitud;
                String info;
                
                //Obtenemos la posición y nombres de Variable
                for(int i = 0;i < 3;i++){

                    if(variables.get(i).getShortName().equals("time")){
                        nameTime = variables.get(i).getShortName();
                    }else{            
                        if(variables.get(i).getShortName().equals("lat")){
                            nameLat = variables.get(i).getShortName();
                            latitudes = variables.get(i).read();                
                        }else{
                            if(variables.get(i).getShortName().equals("lon")){
                            nameLon = variables.get(i).getShortName();
                            longitudes = variables.get(i).read();                
                            }
                        }    
                    }
                }
                
			
                //Cabeceras de datos
                registros[0] = nameTime + ";" + nameLat + ";" + nameLon + ";" + nameVariable;
                
                
                for(int i = 0; i < nLatitud; i++){
                
                    lat = latitudes.getDouble(i);//Obtenemos el valor de latitud
                    latitud = formato.format(lat);
                    
                    
                    for(int j = 0; j < nLongitud; j++){
                        
                        registros[posicion] = fechas[fecha] + ";" + latitud + ";";
                        
                        lon = longitudes.getDouble(j); //Obtenemos valor de longitud
                        longitud = formato.format(lon);
                        registros[posicion] += longitud + ";"; 
                        
                        int[] origin = new int[] {fecha, i, j}; //punto inicial de la lectura (tiempo,longitud,latitud)
                        int[] size = new int[] {1, 1, 1};//tamaño de la muestra requerida (tiempo, longitud, latitud)
                        Array var = v.read(origin,size); //lectura partiendo desde el punto de origen con el tamaño requerido
                        dato = var.getFloat(0);//Obtenemos valor de Variable
                        info = formato.format(dato);//Formateamos valor obtenido
                        
                         if("-9999,000".equals(info)){
                            info = "-9999,0";
                        }
                        
                        registros[posicion] += info; 
                        posicion++;
                    }
                }
                

                
            
            } catch (IOException ex) {
            Logger.getLogger(Objeto_NC.class.getName()).log(Level.SEVERE, null, ex);
            }  
       return(registros);
    }
    
    
    //Método para crear y exportar archivo CSV
    public void crearCSV(Variable v, String nombreCSV, String textFecha) throws InvalidRangeException{
        
        
            String nameVariable = v.getShortName();
            String nameTime = textFecha;
            String nameLon = "";
            String nameLat = "";  
            int[] shape = v.getShape();
            int nTiempo = shape[0]; //cantidad de elementos tiempo dentro de la variable
            int nLatitud = shape[1];//cantidad de elementos latitud dentro de la variable
            int nLongitud = shape[2];//cantidad de elementos longitud dentro de la variable
            int n = nLongitud*nLatitud;
            int fecha = obtenerIndexFecha(textFecha);
            
           
            
            try {    
                Array longitudes = null; //guardamos las longitudes de la variable
                Array latitudes = null; //guardamos las latitudes de la variable
                DecimalFormat formato = new DecimalFormat("#.000");
                DecimalFormat formato1 = new DecimalFormat("#.00");
                double lat;
                double lon;
                float dato;
                int posicion = 1;
                String[] registros = new String[n+1];
                String latitud;
                String longitud;
                String info;
                
                for(int i = 0;i < 3;i++){

                    if(variables.get(i).getShortName().equals("time")){
                        nameTime = variables.get(i).getShortName();
                    }else{            
                        if(variables.get(i).getShortName().equals("lat")){
                            nameLat = variables.get(i).getShortName();
                            latitudes = variables.get(i).read();                
                        }else{
                            if(variables.get(i).getShortName().equals("lon")){
                            nameLon = variables.get(i).getShortName();
                            longitudes = variables.get(i).read();                
                            }
                        }    
                    }
                }
                
                FileWriter archivo = new FileWriter(nombreCSV); //Creamos archivo que contendrá la información
		BufferedWriter escritor = new BufferedWriter(archivo);//Creamos buffer para información
			
                
                registros[0] = nameTime + ";" + nameLat + ";" + nameLon + ";" + nameVariable;

                
                for(int i = 0; i < nLatitud; i++){
                
                    lat = latitudes.getDouble(i);
                    latitud = formato.format(lat);
                    
                    
                    for(int j = 0; j < nLongitud; j++){
                        
                        registros[posicion] = fechas[fecha] + ";" + latitud + ";";
                        
                        lon = longitudes.getDouble(j);
                        longitud = formato.format(lon);
                        registros[posicion] += longitud + ";"; 
                        
                        int[] origin = new int[] {fecha, i, j}; //punto inicial de la lectura (tiempo,longitud,latitud)
                        int[] size = new int[] {1, 1, 1};//tamaño de la muestra requerida (tiempo, longitud, latitud)
                        Array pr = v.read(origin,size); //lectura partiendo desde el punto de origen con el tamaño requerido
                        dato = pr.getFloat(0);
                        info = formato1.format(dato);
                        
                        if("-9999,000".equals(info)){
                            info = "-9999,0";
                        }
                        
                        registros[posicion] += info;                         
                        posicion++;
                    }
                }
                
                for(int i = 0; i< registros.length; i++) {
                    escritor.write(registros[i]); //Escribimos la información en el archivo
                    escritor.newLine(); //salto de línea
                }
			escritor.close(); //Cerramos el escritor
			System.out.println("ARCHIVO CREADO EXITOSAMENTE");
                        JOptionPane.showMessageDialog(null, "ARCHIVO CREADO EXITOSAMENTE", "", JOptionPane.INFORMATION_MESSAGE);        
                        

            
            } catch (IOException ex) {
            Logger.getLogger(Objeto_NC.class.getName()).log(Level.SEVERE, null, ex);
            }
        
    }
    
    
    //Método para leer archivo CSV
    public void leerCSV(String nombreCSV){
        
        
            FileReader archCSV = null;
        try {
            archCSV = new FileReader(nombreCSV);
            CSVParser conPuntoYComa = new CSVParserBuilder().withSeparator(';').build(); //Definimos el tipo de separador que se buscará en el archivo
            CSVReader csvReader = new CSVReaderBuilder(archCSV).withCSVParser(conPuntoYComa).build(); //Creamos el lector del archivo
            String[] fila; 
            
            
            while((fila = csvReader.readNext()) != null) { //Guardamos las filas del archivo en el arreglo y verificamos que no se encuentra vacía
                
                //Verificamos la cantidad de elementos por fila
                if(fila.length == 4){
                    System.out.println(fila[0] + " | " + fila[1] + " | " + fila[2] + " | " + fila[3]);
                }else{
                    if(fila.length == 5){
                        System.out.println(fila[0] + " | " + fila[1] + " | " + fila[2] + " | " + fila[3] + "|" + fila[4]);
                    }else{
                        if(fila.length == 6){
                            System.out.println(fila[0] + " | " + fila[1] + " | " + fila[2] + " | " + fila[3] + "|" + fila[4] + " | " + fila[5]);
                        }else{
                            if(fila.length == 7){
                                System.out.println(fila[0] + " | " + fila[1] + " | " + fila[2] + " | " + fila[3] + "|" + fila[4] + " | " + fila[5] + " | " + fila[6]);                                
                            }if(fila.length == 3){
                                    System.out.println(fila[0] + " | " + fila[1] + " | " + fila[2]);
                            }
                        }
                    }                
                }
                
            } 
            csvReader.close();//Cerramos el lector
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Objeto_NC.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Objeto_NC.class.getName()).log(Level.SEVERE, null, ex);
        } catch (CsvValidationException ex) {
            Logger.getLogger(Objeto_NC.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                archCSV.close();
            } catch (IOException ex) {
                Logger.getLogger(Objeto_NC.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
       
    }
    
    //Obtenemos los valores de la Variable para las coordenadas de la Región de Ñuble
    public String[] obtenerInfoNuble(Variable v, String textFecha) throws IOException, InvalidRangeException{
        
        String nameVariable = v.getShortName();       
        String nameTime="";
        String nameLon="";
        String nameLat="";
        Array latitudes = null;
        Array longitudes = null;
        int[] shape = v.getShape();
        int nTiempo = shape[0]; //cantidad de elementos tiempo dentro de la variable
        int nLatitud = shape[1];//cantidad de elementos latitud dentro de la variable
        int nLongitud = shape[2];//cantidad de elementos longitud dentro de la variable
        int n = nLatitud*nLongitud;
        int fecha = obtenerIndexFecha(textFecha);
        
        DecimalFormat formato = new DecimalFormat("#.000");
        double lat;
        double lon;
        float dato;
        int posicion = 1;
        int contador = 1;
        String[] registros = new String[n+1];
        String latitud;
        String longitud;    
        String info;
        String[] coordsNuble = new String[nuble.length+1];
        
        
        for(int i = 0;i < 3;i++){

            if(variables.get(i).getShortName().equals("time")){
                nameTime = variables.get(i).getShortName();
            }else{            
                if(variables.get(i).getShortName().equals("lat")){
                    nameLat = variables.get(i).getShortName();
                    latitudes = variables.get(i).read();                
                }else{
                    if(variables.get(i).getShortName().equals("lon")){
                    nameLon = variables.get(i).getShortName();
                    longitudes = variables.get(i).read();                
                    }
                }    
            }
        }


        
        registros[0] = nameTime + ";" + nameLat + ";" + nameLon + ";" + nameVariable;
        coordsNuble[0] = nameTime + ";" + nameLat + ";" + nameLon + ";" + nameVariable;
        
        
        for(int i = 0; i < nLatitud; i++){
                
                    lat = latitudes.getDouble(i);
                    latitud = formato.format(lat);
                    
                    
                    for(int j = 0; j < nLongitud; j++){
                        
                        registros[posicion] = fechas[fecha] + ";" + latitud + ";";
                        
                        lon = longitudes.getDouble(j);
                        longitud = formato.format(lon);
                        registros[posicion] += longitud + ";"; 
                        
                        
                        
                        int[] origin = new int[] {fecha, i, j}; //punto inicial de la lectura (tiempo,longitud,latitud)
                        int[] size = new int[] {1, 1, 1};//tamaño de la muestra requerida (tiempo, longitud, latitud)
                        Array pr = v.read(origin,size); //lectura partiendo desde el punto de origen con el tamaño requerido
                        dato = pr.getFloat(0);
                        info = formato.format(dato);
                        
                         if("-9999,000".equals(info)){
                            info = "-9999,0";
                        }
                        
                        registros[posicion] += info; 
                        
                        String coord = latitud + ";" + longitud;
                        
                        if(buscarCoordenada(nuble,coord)){ //Verificamos si la coordenada corresponde a una coordenada de la Región de Ñuble
                           
                            coordsNuble[contador] = registros[posicion]; //Guardamos la información correspondiente a las coordenadas de la Región de Ñuble
                            contador++;
                        }
                        
                        
                        
                        posicion++;
                    }
                }
        
        return(coordsNuble);
    }
    
    public boolean buscarCoordenada(String[] string,String coord){
        return Arrays.asList(string).contains(coord);
    }
    
    
    
    public int obtenerIndexFecha(String textFecha){
        int posicion = -1;
        for(int i = 0; i < fechas.length; i++){
            if(textFecha.equals(fechas[i])){
                posicion = i;
            }
        }
        
        if(posicion == -1){
            JOptionPane.showMessageDialog(null, "Fecha incorrecta", "", JOptionPane.ERROR_MESSAGE); 
            return 0;
        }else{        
            return(posicion);
        }
    }
    
    @Override
    public String toString() {
       String cadena="";
       cadena+=" ATRIBUTOS: \n";
       
       for(int i=0; i < attributes.size(); i++) 
          cadena+=" Atributo ["+(i+1)+"] = "+attributes.get(i).toString()+"\n";
       
            
       cadena+=" VARIABLES: \n";
      
       for(int i=0; i < variables.size(); i++) 
          cadena+=" Variable ["+(i+1)+"] = "+variables.get(i).toString()+"\n";
       
       return cadena;
    }
    

    
}
